{"version":3,"sources":["addingNotes.js","Notes.js","CompletedNotes.js","todo.js","serviceWorker.js","index.js"],"names":["idValue","AddNote","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","title","event","setState","target","value","note","id","newNoteAddHandler","alert","_this2","react_default","a","createElement","className","placeholder","onChange","e","titleInput","vols","inputChange","onClick","addBtnClickHandler","Component","Notes","deleteHandler","markCompleteTasks","editHandler","array","notesContainer","map","key","deleteBtnClickHandler","promptHandler","markCompleteClickHandler","CompletedNotes","completeDeleteHandler","completedArray","completeNotesContainer","idtype","completeDeleteClickHandler","ToDo","notes","completeNotes","editer","bind","assertThisInitialized","allNotes","concat","toConsumableArray","filteredNotes","filter","arrayObj","find","obj","filtered","findText","updatedText","prompt","updatedNote","objectSpread","console","log","addingNotes","src_Notes","src_CompletedNotes","Boolean","window","location","hostname","match","ReactDOM","render","src_todo","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAEIA,QAAU,GAwDCC,cAtDX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACVC,KAAM,GACNC,MAAM,IAJKT,0EAQPU,GACPP,KAAKQ,SAAS,CACVF,MAAMC,EAAME,OAAOC,4CAIfH,GACRP,KAAKQ,SAAS,CACVH,KAAME,EAAME,OAAOC,qDAKvB,GAAqB,KAAlBV,KAAKI,MAAMC,MAAgC,KAAnBL,KAAKI,MAAME,MAAtC,CAIA,IAAMK,EAAO,CACTL,MAAON,KAAKI,MAAME,MAClBD,KAAML,KAAKI,MAAMC,KACjBO,GAAIlB,GAERM,KAAKJ,MAAMiB,kBAAkBF,GAC7BjB,GAAoB,EACpBM,KAAKQ,SAAS,CAACH,KAAK,GACRC,MAAM,UAXdQ,MAAM,oEAaN,IAAAC,EAAAf,KACJ,OACIgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,QACTC,YAAY,QACZC,SAAU,SAACC,GAAD,OAAKP,EAAKQ,WAAWD,IAC/BZ,MAAOV,KAAKI,MAAME,QAClBU,EAAAC,EAAAC,cAAA,WACRF,EAAAC,EAAAC,cAAA,YAAUM,KAAK,KACLL,UAAU,aACVC,YAAY,uBACZC,SAAU,SAACC,GAAD,OAAOP,EAAKU,YAAYH,IAAIZ,MAAOV,KAAKI,MAAMC,OACvDW,EAAAC,EAAAC,cAAA,WACXF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUO,QAAS,kBAAMX,EAAKY,uBAAhD,oBAjDMC,aCoCPC,gMAnCWjB,GAClBZ,KAAKJ,MAAMkC,cAAclB,oDAEJA,GACrBZ,KAAKJ,MAAMmC,kBAAkBnB,yCAEnBA,GACXZ,KAAKJ,MAAMoC,YAAYpB,oCAIhB,IAAAf,EAAAG,KACHiC,EAAQjC,KAAKJ,MAAMsC,eAAeC,IAAI,SAACxB,EAAKC,GAC3C,OACII,EAAAC,EAAAC,cAAA,KAAGC,UAAU,OAAOiB,IAAKxB,GACrBI,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAaR,EAAKL,OAC/BU,EAAAC,EAAAC,cAAA,SAAIP,EAAKN,MACTW,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAYO,QAAS,kBAAM7B,EAAKwC,sBAAsB1B,EAAKC,MAA7E,KAA4FI,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WACtGF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAAWO,QAAS,kBAAM7B,EAAKyC,cAAc3B,EAAKC,MAApE,QACAI,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeO,QAAS,kBAAM7B,EAAK0C,yBAAyB5B,EAAKC,MAAnF,gBAKZ,OACII,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,6BAAd,kBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXc,WA9BAL,aCyBLY,qMAxBgB5B,GACvBZ,KAAKJ,MAAM6C,sBAAsB7B,oCAE7B,IAAAf,EAAAG,KACA0C,EAAiB1C,KAAKJ,MAAM+C,uBAAuBR,IAAI,SAACxB,EAAKiC,GAC7D,OACI5B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBiB,IAAKQ,GAC9B5B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAaR,EAAKL,OAC/BU,EAAAC,EAAAC,cAAA,SAAIP,EAAKN,MACTW,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAYO,QAAS,kBAAM7B,EAAKgD,2BAA2BlC,EAAKC,MAAlF,KAAiGI,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,cAKlH,OACIF,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,6BAAd,SACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVuB,WAnBSd,aCwGdkB,cApGX,SAAAA,EAAYlD,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8C,IACdjD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgD,GAAA3C,KAAAH,KAAMJ,KACDQ,MAAQ,CACV2C,MAAO,GACPC,cAAe,GACfC,QAAO,GAEVpD,EAAKgB,kBAAoBhB,EAAKgB,kBAAkBqC,KAAvBpD,OAAAqD,EAAA,EAAArD,QAAAqD,EAAA,EAAArD,CAAAD,KACzBA,EAAKiC,cAAgBjC,EAAKiC,cAAcoB,KAAnBpD,OAAAqD,EAAA,EAAArD,QAAAqD,EAAA,EAAArD,CAAAD,KACrBA,EAAKkC,kBAAoBlC,EAAKkC,kBAAkBmB,KAAvBpD,OAAAqD,EAAA,EAAArD,QAAAqD,EAAA,EAAArD,CAAAD,KACzBA,EAAK4C,sBAAwB5C,EAAK4C,sBAAsBS,KAA3BpD,OAAAqD,EAAA,EAAArD,QAAAqD,EAAA,EAAArD,CAAAD,KAC7BA,EAAKmC,YAAcnC,EAAKmC,YAAYkB,KAAjBpD,OAAAqD,EAAA,EAAArD,QAAAqD,EAAA,EAAArD,CAAAD,KAXLA,iFAcAc,GAChB,IAAMyC,EAAQ,CAAIzC,GAAJ0C,OAAAvD,OAAAwD,EAAA,EAAAxD,CAAaE,KAAKI,MAAM2C,QACtC/C,KAAKQ,SAAS,CAACuC,MAAMK,0CAGTxC,GACV,IAAM2C,EAAgBvD,KAAKI,MAAM2C,MAAMS,OAAO,SAAC7C,GAC3C,OAAOA,EAAKC,KAAOA,IAGvBZ,KAAKQ,SAAS,CAACuC,MAAMQ,kDAGH3C,GAClB,IAAM2C,EAAgBvD,KAAKI,MAAM4C,cAAcQ,OAAO,SAAC7C,GACnD,OAAOA,EAAKC,KAAOA,IAGvBZ,KAAKQ,SAAS,CAACwC,cAAcO,8CAGf3C,GACd,IAGM6C,EAAQ,CAHOzD,KAAKI,MAAM2C,MAAMW,KAAK,SAACC,GACxC,OAAOA,EAAI/C,KAAOA,KAERyC,OAAAvD,OAAAwD,EAAA,EAAAxD,CAAoBE,KAAKI,MAAM4C,gBAC7ChD,KAAKQ,SAAS,CAACwC,cAAcS,IAC7B,IAAMG,EAAW5D,KAAKI,MAAM2C,MAAMS,OAAO,SAAC7C,GACtC,OAAOA,EAAKC,KAAOA,IAGvBZ,KAAKQ,SAAS,CAACuC,MAAMa,wCAGbhD,GACR,IAAMiD,EAAW7D,KAAKI,MAAM2C,MAAMW,KAAK,SAACC,GACxC,OAAOA,EAAI/C,IAAMA,IAEbkD,EAAcC,OAAO,sBAAsBF,EAASxD,MACpD2D,EAAchE,KAAKI,MAAM2C,MAAMZ,IAAI,SAAAxB,GAInC,OAHNA,EAAKC,KAAOA,IACFD,EAAIb,OAAAmE,EAAA,EAAAnE,CAAA,GAAOa,EAAP,CAAaN,KAAKyD,KAEnBnD,IAEXX,KAAKQ,SAAS,CAACuC,MAAMiB,qCAQrB,OAFAE,QAAQC,IAAI,QAASnE,KAAKI,MAAM2C,OAG5B/B,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAd,qBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAd,iCACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAACkD,EAAD,CAASvD,kBAAmBb,KAAKa,qBAErCG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAACmD,EAAD,CACInC,eAAgBlC,KAAKI,MAAM2C,MAC3BjB,cAAe9B,KAAK8B,cACpBC,kBAAmB/B,KAAK+B,kBACxBC,YAAehC,KAAKgC,eAG5BhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAACoD,EAAD,CACI3B,uBAA0B3C,KAAKI,MAAM4C,cACrCP,sBAAuBzC,KAAKyC,kCAxFrCb,aCOC2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.116863cd.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport \"./todo.css\";\r\nlet idValue = 1;\r\nclass AddNote extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n           text: '',\r\n           title:''\r\n        };\r\n    }\r\n\r\n    titleInput(event){\r\n        this.setState({\r\n            title:event.target.value\r\n        });\r\n    }\r\n\r\n    inputChange(event){\r\n        this.setState({\r\n            text: event.target.value,\r\n        });\r\n    }\r\n\r\n    addBtnClickHandler(){\r\n        if(this.state.text==='' || this.state.title===''){\r\n            alert(\"Please enter a title and note!!\");\r\n            return;\r\n        }\r\n        const note = {\r\n            title: this.state.title,\r\n            text: this.state.text,\r\n            id: idValue\r\n        };\r\n        this.props.newNoteAddHandler(note);   \r\n        idValue = idValue + 1;\r\n        this.setState({text:'',\r\n                    title:''}) \r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"add-note-container\">\r\n                <input className='title'\r\n                        placeholder='Title'\r\n                        onChange={(e)=>this.titleInput(e)}\r\n                        value={this.state.title}>\r\n                </input><br/>\r\n                <textarea vols='20'\r\n                          className=\"text-input\"\r\n                          placeholder=\"Enter your note here\" \r\n                          onChange={(e) => this.inputChange(e)} value={this.state.text}>\r\n                </textarea><br/>\r\n                <button className=\"add-btn\" onClick={() => this.addBtnClickHandler()}>Add Note</button>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nexport default AddNote;","import React, {Component} from 'react'\r\n\r\nclass Notes extends Component{\r\n    \r\n    deleteBtnClickHandler(id){\r\n        this.props.deleteHandler(id);\r\n    }\r\n    markCompleteClickHandler(id){\r\n        this.props.markCompleteTasks(id);\r\n    }\r\n    promptHandler(id){\r\n       this.props.editHandler(id);\r\n       \r\n    }\r\n   \r\n     render() {\r\n       let array = this.props.notesContainer.map((note,id) =>{\r\n            return(\r\n                <p className='note' key={id}>\r\n                    <p className='title-css'>{note.title}</p>\r\n                    <p>{note.text}</p>\r\n                    <button className='close-btn' onClick={() => this.deleteBtnClickHandler(note.id)}>X</button><br/><br/><br/>\r\n                    <button className='edit-btn' onClick={() => this.promptHandler(note.id)}>Edit</button>\r\n                    <button className='complete-btn' onClick={() => this.markCompleteClickHandler(note.id)}>Mark done</button>\r\n                </p>\r\n            )\r\n        }\r\n    )\r\n        return (\r\n            <div>\r\n                <h4 className=\"text-align-center heading\">Get this done:</h4>\r\n                <div className='todo-note'>\r\n                   {array}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Notes;\r\n","import React, {Component} from 'react'\r\n\r\nclass CompletedNotes extends Component{\r\n    completeDeleteClickHandler(id){\r\n        this.props.completeDeleteHandler(id);\r\n    }\r\n    render(){\r\n        let completedArray = this.props.completeNotesContainer.map((note,idtype) =>{\r\n            return(\r\n                <p className='complete-note' key={idtype}>\r\n                    <p className='title-css'>{note.title}</p>\r\n                    <p>{note.text}</p>\r\n                    <button className='close-btn' onClick={() => this.completeDeleteClickHandler(note.id)}>X</button><br/><br/>\r\n                </p>\r\n            )\r\n        }\r\n    )\r\n        return(\r\n            <div>\r\n               <h5 className=\"text-align-center heading\">Done:</h5>\r\n               <div className='todo-note'>\r\n                   {completedArray}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default CompletedNotes","import React, {Component} from 'react'\r\nimport AddNote from \"./addingNotes.js\";\r\nimport Notes from \"./Notes.js\";\r\nimport CompletedNotes from './CompletedNotes.js';\r\nimport './todo.css';\r\nclass ToDo extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n           notes: [] ,\r\n           completeNotes: [] ,\r\n           editer:false  \r\n        };\r\n        this.newNoteAddHandler = this.newNoteAddHandler.bind(this);\r\n        this.deleteHandler = this.deleteHandler.bind(this);\r\n        this.markCompleteTasks = this.markCompleteTasks.bind(this);\r\n        this.completeDeleteHandler = this.completeDeleteHandler.bind(this);\r\n        this.editHandler = this.editHandler.bind(this);\r\n    }\r\n\r\n    newNoteAddHandler(note) {\r\n      const allNotes = [note, ...this.state.notes];\r\n      this.setState({notes:allNotes})\r\n    }\r\n\r\n    deleteHandler(id){\r\n        const filteredNotes = this.state.notes.filter((note) =>{\r\n            return note.id !== id;\r\n            } \r\n        );\r\n        this.setState({notes:filteredNotes})\r\n    }\r\n\r\n    completeDeleteHandler(id){\r\n        const filteredNotes = this.state.completeNotes.filter((note) =>{\r\n            return note.id !== id;\r\n            } \r\n        );\r\n        this.setState({completeNotes:filteredNotes})\r\n         \r\n    }\r\n    markCompleteTasks(id){\r\n        const markComplete = this.state.notes.find((obj) =>{\r\n            return obj.id === id;\r\n        });\r\n        const arrayObj = [markComplete,...this.state.completeNotes]\r\n        this.setState({completeNotes:arrayObj});\r\n        const filtered = this.state.notes.filter((note) =>{\r\n            return note.id !== id;\r\n            } \r\n        );\r\n        this.setState({notes:filtered})\r\n      \r\n    }\r\n    editHandler(id){\r\n        const findText = this.state.notes.find((obj) =>{\r\n        return obj.id == id;\r\n        });\r\n        let updatedText = prompt(\"Edit your text here\",findText.text)\r\n        let updatedNote = this.state.notes.map(note =>{\r\n\t\t\tif(note.id === id){\r\n                note = {...note, text:updatedText};\r\n            }\r\n            return note;\r\n        });\r\n        this.setState({notes:updatedNote});\r\n    }\r\n        \r\n    \r\n\r\n    render() {\r\n        console.log('Notes', this.state.notes);\r\n        \r\n        return (\r\n            <div>\r\n            \r\n                <h3 className='heading'>To Do Application</h3>\r\n                <h5 className=\"text-align-center\">A list about the things to do</h5> \r\n                <div className=\"notes-container\">\r\n                    <div className=\"col-50\">\r\n                        <AddNote newNoteAddHandler={this.newNoteAddHandler} />\r\n                    </div>\r\n                    <div className=\"col-50\">\r\n                        <Notes\r\n                            notesContainer={this.state.notes}\r\n                            deleteHandler={this.deleteHandler}\r\n                            markCompleteTasks={this.markCompleteTasks}\r\n                            editHandler = {this.editHandler}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-50\">\r\n                        <CompletedNotes \r\n                            completeNotesContainer = {this.state.completeNotes}\r\n                            completeDeleteHandler={this.completeDeleteHandler}\r\n                        />\r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n                      \r\n                \r\n            </div>    \r\n        );\r\n    }\r\n}\r\n\r\nexport default ToDo;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ToDo from './todo';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<ToDo />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}