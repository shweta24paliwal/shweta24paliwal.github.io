{"version":3,"sources":["addingNotes.js","Notes.js","CompletedNotes.js","todo.js","serviceWorker.js","index.js"],"names":["idValue","AddNote","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","event","setState","target","value","note","id","newNoteAddHandler","alert","_this2","react_default","a","createElement","className","placeholder","onChange","e","inputChange","onClick","addBtnClickHandler","Component","Notes","deleteHandler","markCompleteTasks","editHandler","array","notesContainer","map","key","deleteBtnClickHandler","promptHandler","markCompleteClickHandler","CompletedNotes","completeDeleteHandler","completedArray","completeNotesContainer","idtype","completeDeleteClickHandler","ToDo","notes","completeNotes","editer","bind","assertThisInitialized","allNotes","concat","toConsumableArray","filteredNotes","filter","arrayObj","find","obj","filtered","findText","updatedText","prompt","updatedNote","objectSpread","console","log","addingNotes","src_Notes","src_CompletedNotes","Boolean","window","location","hostname","match","ReactDOM","render","src_todo","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d401d636.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./todo.css\";\nlet idValue = 1;\nclass AddNote extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n           text: \"\"\n        };\n    }\n\n    inputChange(event){\n        this.setState({\n            text: event.target.value,\n        });\n    }\n\n    addBtnClickHandler(){\n        if(this.state.text == \"\"){\n            alert(\"Please enter a note!!\");\n            return;\n        }\n        const note = {\n            text: this.state.text,\n            id: idValue\n        };\n        \n        this.props.newNoteAddHandler(note);   \n        idValue = idValue + 1;\n        this.setState({text:''}) \n       \n    }\n    render(){\n        return(\n            <div className=\"add-note-container\">\n                <textarea className=\"text-input\"\n                          placeholder=\"Enter your note here\" \n                          onChange={(e) => this.inputChange(e)} value={this.state.text}>\n                </textarea><br/>\n                <button className=\"add-btn\" onClick={() => this.addBtnClickHandler()}>Add Note</button>\n            </div>\n\n        )\n    }\n}\nexport default AddNote;","import React, {Component} from 'react'\n\nclass Notes extends Component{\n    \n    deleteBtnClickHandler(id){\n        this.props.deleteHandler(id);\n    }\n    markCompleteClickHandler(id){\n        this.props.markCompleteTasks(id);\n    }\n    promptHandler(id){\n       this.props.editHandler(id);\n       \n    }\n   \n     render() {\n       let array = this.props.notesContainer.map((text,id) =>{\n            return(\n                <p className='note' key={id}>\n                    {text.text}\n                    <button className='close-btn' onClick={() => this.deleteBtnClickHandler(text.id)}>X</button><br/><br/><br/>\n                    <button className='edit-btn' onClick={() => this.promptHandler(text.id)}>Edit</button>\n                    <button className='complete-btn' onClick={() => this.markCompleteClickHandler(text.id)}>Mark done</button>\n                </p>\n            )\n        }\n    )\n        return (\n            <div>\n                <h4 className=\"text-align-center title\">Get this done:</h4>\n                <div className='todo-note'>\n                   {array}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Notes;\n","import React, {Component} from 'react'\n\nclass CompletedNotes extends Component{\n    completeDeleteClickHandler(id){\n        this.props.completeDeleteHandler(id);\n    }\n    render(){\n        let completedArray = this.props.completeNotesContainer.map((text,idtype) =>{\n            return(\n                <p className='complete-note' key={idtype}>\n                    {text.text}\n                    <button className='close-btn' onClick={() => this.completeDeleteClickHandler(text.id)}>X</button><br/><br/>\n                </p>\n            )\n        }\n    )\n        return(\n            <div>\n               <h5 className=\"text-align-center title\">Done:</h5>\n               <div className='todo-note'>\n                   {completedArray}\n                </div>\n            </div>\n        );\n    }\n}\nexport default CompletedNotes","import React, {Component} from 'react'\nimport AddNote from \"./addingNotes.js\";\nimport Notes from \"./Notes.js\";\nimport CompletedNotes from './CompletedNotes.js';\nimport './todo.css';\nclass ToDo extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n           notes: [] ,\n           completeNotes: [] ,\n           editer:false  \n        };\n        this.newNoteAddHandler = this.newNoteAddHandler.bind(this);\n        this.deleteHandler = this.deleteHandler.bind(this);\n        this.markCompleteTasks = this.markCompleteTasks.bind(this);\n        this.completeDeleteHandler = this.completeDeleteHandler.bind(this);\n        this.editHandler = this.editHandler.bind(this);\n    }\n\n    newNoteAddHandler(note) {\n      const allNotes = [note, ...this.state.notes];\n      this.setState({notes:allNotes})\n    }\n\n    deleteHandler(id){\n        const filteredNotes = this.state.notes.filter((note) =>{\n            return note.id !== id;\n            } \n        );\n        this.setState({notes:filteredNotes})\n    }\n\n    completeDeleteHandler(id){\n        const filteredNotes = this.state.completeNotes.filter((note) =>{\n            return note.id !== id;\n            } \n        );\n        this.setState({completeNotes:filteredNotes})\n         \n    }\n    markCompleteTasks(id){\n        const markComplete = this.state.notes.find((obj) =>{\n            return obj.id === id;\n        });\n        const arrayObj = [markComplete,...this.state.completeNotes]\n        this.setState({completeNotes:arrayObj});\n        const filtered = this.state.notes.filter((note) =>{\n            return note.id !== id;\n            } \n        );\n        this.setState({notes:filtered})\n      \n    }\n    editHandler(id){\n        const findText = this.state.notes.find((obj) =>{\n        return obj.id == id;\n        });\n        let updatedText = prompt(\"Edit your text here\",findText.text)\n        let updatedNote = this.state.notes.map(note =>{\n\t\t\tif(note.id === id){\n                note = {...note, text:updatedText};\n            }\n            return note;\n        });\n        this.setState({notes:updatedNote});\n    }\n        \n    \n\n    render() {\n        console.log('Notes', this.state.notes);\n        \n        return (\n            <div>\n            \n                <h3 className='title'>To Do Application</h3>\n                <h5 className=\"text-align-center\">A list about the things to do</h5> \n                <div className=\"notes-container\">\n                    <div className=\"col-50\">\n                        <AddNote newNoteAddHandler={this.newNoteAddHandler} />\n                    </div>\n                    <div className=\"col-50\">\n                        <Notes\n                            notesContainer={this.state.notes}\n                            deleteHandler={this.deleteHandler}\n                            markCompleteTasks={this.markCompleteTasks}\n                            editHandler = {this.editHandler}\n                        />\n                    </div>\n                    <div className=\"col-50\">\n                        <CompletedNotes \n                            completeNotesContainer = {this.state.completeNotes}\n                            completeDeleteHandler={this.completeDeleteHandler}\n                        />\n                    </div>\n                    \n                </div>\n                \n                      \n                \n            </div>    \n        );\n    }\n}\n\nexport default ToDo;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ToDo from './todo';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<ToDo />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}