{"version":3,"sources":["Components/GiphyCards/GiphyCards.module.css","Components/Gifted/Gifted.module.css","Components/NoResults/noResults.module.css","serviceWorker.js","Components/GifImage/GifImage.js","Components/GiphyCards/GiphyCards.js","Components/NoResults/NoResults.js","Components/Gifted/Gifted.js","index.js","Components/GifImage/gifImage.module.css"],"names":["module","exports","container","loadMore","circle","circle-spin","mainContainer","Dark","heading","searchBar","searchInput","searchButton","toggleModeButton","querySearched","noResultsFound","Boolean","window","location","hostname","match","GifImage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","gif","React","createRef","state","play","clickHandler","bind","assertThisInitialized","rub","SuperGif","current","progressbar_height","auto_play","loop_mode","rubbable","load","console","log","_this2","setState","pause","data","downsizedStillGif","images","fixed_width_still","url","playableGif","fixed_width_downsampled","react_default","a","createElement","className","styles","giphyImage","onClick","concat","hoverIcon","ref","src","rel_animated_src","rel_auto_play","rel_rubbable","alt","Component","require","GiphyCards","intersectionCallback","observer","IntersectionObserver","rootMargin","threshold","target","document","querySelector","observe","unobserve","entries","intersectionRatio","loadMoreData","responseData","length","gifs","map","index","Components_GifImage_GifImage","key","showLoadMore","id","NoResults","_ref","totalCount","Gifted","offset","limit","getGiphyData","clearAll","giphyData","query","value","defaultQuery","trim","makeGetGifCall","alert","enterKeyPressed","e","toggleDisplayMode","displayMode","status","axios","get","then","response","pagination","total_count","toConsumableArray","error","_this3","header","type","placeholder","searchQuery","onKeyPress","Components_GiphyCards_GiphyCards","Components_NoResults_NoResults","ReactDOM","render","Components_Gifted_Gifted","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e18174f0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GiphyCards_container__2DXa9\",\"loadMore\":\"GiphyCards_loadMore__3txr0\",\"circle\":\"GiphyCards_circle__Hf2AF\",\"circle-spin\":\"GiphyCards_circle-spin__bIvm5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Gifted_mainContainer__1qeW1\",\"Dark\":\"Gifted_Dark__2HLlh\",\"heading\":\"Gifted_heading__UPWGY\",\"searchBar\":\"Gifted_searchBar__S3_-0\",\"searchInput\":\"Gifted_searchInput__2nRed\",\"searchButton\":\"Gifted_searchButton__tiPco\",\"toggleModeButton\":\"Gifted_toggleModeButton__2fHpt\",\"querySearched\":\"Gifted_querySearched__GcO58\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noResultsFound\":\"noResults_noResultsFound__29cyZ\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport styles from \"./gifImage.module.css\";\n\nclass GifImage extends Component {\n  constructor(props) {\n    super(props);\n    this.gif = React.createRef();\n    this.state = {\n      play: false\n    };\n    this.clickHandler = this.clickHandler.bind(this);\n  }\n\n  componentDidMount() {\n    /*global SuperGif*/\n    this.rub = new SuperGif({\n      gif: this.gif.current,\n      progressbar_height: 0,\n      auto_play: false,\n      loop_mode: true,\n      rubbable: true\n    });\n\n    this.rub.load(function() {\n      console.log(\"oh hey, now the gif is loaded\");\n    });\n  }\n\n  componentWillUnmount() {}\n\n  clickHandler() {\n    if (this.state.play) {\n      this.setState(\n        {\n          play: false\n        },\n        () => {\n          this.rub.pause();\n        }\n      );\n    } else {\n      this.setState(\n        {\n          play: true\n        },\n        () => {\n          this.rub.play();\n        }\n      );\n    }\n  }\n\n  render() {\n    const { data } = this.props;\n    console.log(\"data\");\n    const downsizedStillGif = data.images.fixed_width_still.url;\n    const playableGif = data.images.fixed_width_downsampled.url;\n\n    return (\n      <div className={styles.giphyImage} onClick={this.clickHandler}>\n        {this.state.play ? (\n          <i className={`fas fa-pause ${styles.hoverIcon}`} />\n        ) : (\n          <i className={`fas fa-play ${styles.hoverIcon}`} />\n        )}\n        <img\n          ref={this.gif}\n          src={downsizedStillGif}\n          rel_animated_src={playableGif}\n          rel_auto_play=\"0\"\n          rel_rubbable=\"1\"\n          alt=\"GIPHY\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default GifImage;\n","import React, { Component } from \"react\";\nimport GifImage from \"../GifImage/GifImage\";\nimport styles from \"./GiphyCards.module.css\";\nrequire('intersection-observer');\n\nclass GiphyCards extends Component {\n  constructor(props) {\n    super(props);\n    this.intersectionCallback = this.intersectionCallback.bind(this);\n  }\n\n  componentDidMount() {\n    const options = {\n      rootMargin: \"300px\",\n      threshold: 0.2\n    };\n    // this creates a observer;\n    this.observer = new IntersectionObserver(\n      this.intersectionCallback,\n      options\n    );\n\n    this.target = document.querySelector(\"#loadMoreDiv\");\n    if (this.target) {\n      this.observer.observe(this.target);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.target) {\n      this.observer.unobserve(this.target);\n    }\n  }\n\n  intersectionCallback(entries) {\n    if (entries[0].intersectionRatio > 0) {\n      this.props.loadMoreData();\n    }\n  }\n\n  render() {\n    const responseData = this.props.responseData;\n    if (responseData.length === 0) {\n      return null;\n    }\n\n    const gifs = responseData.map((data, index) => {\n      return <GifImage data={data} key={`gif-${index}`} />;\n    });\n\n    return (\n      <div>\n        <div className={styles.container}>{gifs}</div>\n        {this.props.showLoadMore && (\n          <div id=\"loadMoreDiv\" className={styles.loadMore}>\n            <div className={styles.circle} />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default GiphyCards;\n","import React from \"react\";\nimport styles from \"./noResults.module.css\";\n\nconst NoResults = ({ totalCount }) => {\n  if (totalCount === 0) {\n    return (\n      <div className={styles.noResultsFound}>\n        <i className=\"fas fa-exclamation-triangle\" /> No Results Found. Try\n        Another Query.\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default NoResults;\n","import React, { Component } from \"react\";\nimport GiphyCards from \"../GiphyCards/GiphyCards\";\nimport axios from \"axios\";\nimport NoResults from \"../NoResults/NoResults\";\nimport styles from \"./Gifted.module.css\";\n\nclass Gifted extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      giphyData: [],\n      status: null,\n      offset: 0,\n      showLoadMore: false,\n      limit: 15,\n      defaultQuery: \"Dogs\",\n      displayMode: \"Dark\",\n      totalCount: null\n    };\n    this.query = React.createRef();\n  }\n\n  componentDidMount() {\n    this.makeGetGifCall(this.state.defaultQuery);\n  }\n\n  loadMoreData = () => {\n    this.setState(\n      {\n        offset: this.state.offset + this.state.limit\n      },\n      () => {\n        this.getGiphyData();\n      }\n    );\n  };\n\n  getGiphyData = clearAll => {\n    if (clearAll) {\n      this.setState({\n        giphyData: [],\n        offset: 0,\n        showLoadMore: false,\n        totalCount: null\n      });\n    }\n\n    const query = this.query.current.value || this.state.defaultQuery;\n\n    if (query && query.trim() !== \"\") {\n      this.makeGetGifCall(query);\n    } else {\n      alert(\" Please enter GIPHY Keyword\");\n    }\n  };\n\n  makeGetGifCall(query) {\n    axios\n      .get(\n        `http://api.giphy.com/v1/gifs/search?q=${query}&api_key=m8OXJh6U1W2hZwr30SaYZUzrBZ8CQlep&limit=${\n          this.state.limit\n        }&offset=${this.state.offset}`\n      )\n      .then(response => {\n        console.log(response);\n        const totalCount = response.data.pagination.total_count;\n        this.setState({\n          giphyData: [...this.state.giphyData, ...response.data.data],\n          status: response.status,\n          showLoadMore: this.state.offset + this.state.limit < totalCount,\n          totalCount: totalCount\n        });\n      })\n      .catch(error => {\n        this.setState({\n          status: 404,\n          giphyData: null\n        });\n      });\n  }\n\n  enterKeyPressed = e => {\n    if (e.key === \"Enter\") {\n      this.getGiphyData(true);\n    }\n  };\n\n  toggleDisplayMode = () => {\n    if (this.state.displayMode === \"Light\") {\n      this.setState({\n        displayMode: \"Dark\"\n      });\n    } else {\n      this.setState({\n        displayMode: \"Light\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div\n        className={`${styles.mainContainer} ${styles[this.state.displayMode]}`}\n      >\n        <h1 className={styles.heading}>GIFted</h1>\n        <button\n          className={styles.toggleModeButton}\n          onClick={this.toggleDisplayMode}\n        >\n          Click for {this.state.displayMode !== \"Light\" ? \"Light Mode\" : \"Dark Mode\"}\n        </button>\n        <header className={styles.header}>\n          <div className={styles.searchBar}>\n            <input\n              type=\"text\"\n              className={styles.searchInput}\n              ref={this.query}\n              placeholder=\"Search yor GIFs like: cat, funny etc\"\n              value={this.state.searchQuery}\n              onKeyPress={this.enterKeyPressed}\n            />\n            <button\n              className={styles.searchButton}\n              onClick={() => this.getGiphyData(true)}\n            >\n              <i className=\"fas fa-search search-icon\" />\n            </button>\n          </div>\n        </header>\n\n        {this.state.giphyData && this.state.giphyData.length > 0 && (\n          <div>\n            <h3 className={styles.querySearched}>\n              Showing Results for:{\" \"}\n              {this.query.current.value || this.state.defaultQuery}\n            </h3>\n            <GiphyCards\n              loadMoreData={this.loadMoreData}\n              showLoadMore={this.state.showLoadMore}\n              key={this.query}\n              responseData={this.state.giphyData}\n            />\n          </div>\n        )}\n\n        <NoResults totalCount={this.state.totalCount} />\n      </div>\n    );\n  }\n}\n\nexport default Gifted;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import './Reset.css';\nimport * as serviceWorker from \"./serviceWorker\";\nimport Gifted from \"./Components/Gifted/Gifted\";\n\nReactDOM.render(<Gifted />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"giphyImage\":\"gifImage_giphyImage__2NjWA\",\"hoverIcon\":\"gifImage_hoverIcon__34YMW\"};"],"sourceRoot":""}