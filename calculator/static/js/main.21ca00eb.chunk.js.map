{"version":3,"sources":["serviceWorker.js","index.js","calculator.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","calculator","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","numArray","operatorArray","name","op","Calculator","props","_this","Object","_Users_20934_pwa_calculator_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_20934_pwa_calculator_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_20934_pwa_calculator_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","calciScreen","inputValue","ans","operator","answerShown","num","type","newState","setState","value","ansValue","eval","err","console","log","alert","_this2","buttonHandler","map","react__WEBPACK_IMPORTED_MODULE_5___default","className","onClick","clickHandler","toString","operatorHandler","readonly","placeholder","answer","clear","style","Component"],"mappings":"6LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,MAAgBC,SAASC,eAAe,SD2HlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,ylCEhIbC,SAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC9BC,cAAgB,CAClB,CACIC,KAAK,IACLC,GAAG,KAEP,CACID,KAAK,IACLC,GAAG,KAEP,CACID,KAAK,IACLC,GAAG,KAEP,CACID,KAAK,IACLC,GAAG,KAEP,CACID,KAAK,IACLC,GAAG,KAEP,CACID,KAAK,IACLC,GAAG,MAKLC,gCACF,SAAAA,WAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,+GAAA,EAAAD,CAAAE,KAAAL,aACdE,EAAAC,OAAAG,0HAAA,EAAAH,CAAAE,KAAAF,OAAAI,+GAAA,EAAAJ,CAAAH,YAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,YAAc,GACdC,YAAa,EACbC,IAAK,GACLC,SAAU,GACVC,aAAa,GAPHZ,wTAWLa,EAAKC,GACd,IAAMC,EAAW,CAACN,YAAW,GAEzBN,KAAKI,MAAMK,aACXG,EAASP,YAAcK,EACvBE,EAASH,aAAc,GAEvBG,EAASP,YAAcL,KAAKI,MAAMC,YAAcK,EAGpDV,KAAKa,SAASD,2CAIFlB,GACTM,KAAKI,MAAME,YACVN,KAAKa,SAAS,CACVR,YAAYL,KAAKI,MAAMC,YAAcX,EACrCY,YAAW,EACXE,SAAUd,4CAMlB,IACI,IAAMoB,MAAQd,KAAKI,MAAMC,YACnBU,SAAWC,KAAKF,OACtBd,KAAKa,SAAS,CAACR,YAAaU,SAChBN,aAAY,IAE5B,MAAMQ,KACEC,QAAQC,IAAIF,KACZG,MAAM,uDAKdpB,KAAKa,SAAS,CAACR,YAAY,GACXE,IAAI,sCAKhB,IAAAc,EAAArB,KACEsB,EAAgB/B,SAASgC,IAAI,SAACb,GAChC,OACIc,2CAAA5C,EAAAC,cAAA,UAAQ4C,UAAU,OAAOC,QAAS,kBAAML,EAAKM,aAAajB,EAAIkB,WAAW,YAAYlB,KAIvFF,EAAWhB,cAAc+B,IAAI,SAAC7B,GAChC,OACI8B,2CAAA5C,EAAAC,cAAA,UAAQ4C,UAAU,SAASC,QAAS,kBAAML,EAAKQ,gBAAgBnC,EAAGA,MAAMA,EAAGD,QAGnF,OACI+B,2CAAA5C,EAAAC,cAAA,OAAK4C,UAAU,oBACXD,2CAAA5C,EAAAC,cAAA,OAAK4C,UAAU,cACXD,2CAAA5C,EAAAC,cAAA,wBACA2C,2CAAA5C,EAAAC,cAAA,SAAOiD,UAAQ,EAACC,YAAY,IAAIjB,MAASd,KAAKI,MAAMC,cAAcmB,2CAAA5C,EAAAC,cAAA,YAEtE2C,2CAAA5C,EAAAC,cAAA,OAAK4C,UAAU,eACVH,EACDE,2CAAA5C,EAAAC,cAAA,UAAQ4C,UAAU,OAAOC,QAAS,kBAAML,EAAKW,WAA7C,KACAR,2CAAA5C,EAAAC,cAAA,UAAQ4C,UAAU,OAAOC,QAAS,kBAAML,EAAKY,UAA7C,UAEJT,2CAAA5C,EAAAC,cAAA,OAAK4C,UAAU,kBACVjB,GAELgB,2CAAA5C,EAAAC,cAAA,OAAKqD,MAAO,CAACD,MAAO,2BAlFXE,8CAwFVxC","file":"static/js/main.21ca00eb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './calculator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Calculator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {Component} from 'react'\nimport \"./calculator.css\";\n\nconst numArray = [1,2,3,4,5,6,7,8,9,0];\nconst operatorArray = [\n    {\n        name:'x',\n        op:'*'\n    },\n    {\n        name:'+',\n        op:'+'\n    },\n    {\n        name:'-',\n        op:'-'\n    },\n    {\n        name:'/',\n        op:'/'\n    },\n    {\n        name:'%',\n        op:'%'\n    },\n    {\n        name:'.',\n        op:\".\"\n    }\n]\n\n\nclass Calculator extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            calciScreen : '',\n            inputValue : false,\n            ans: '',\n            operator: '',\n            answerShown: false\n            \n        }\n    }\n    clickHandler(num, type){\n        const newState = {inputValue:true};\n\n        if (this.state.answerShown){\n            newState.calciScreen = num;\n            newState.answerShown = false;\n        } else {\n            newState.calciScreen = this.state.calciScreen + num;\n        }\n        \n        this.setState(newState);\n               \n    }\n\n    operatorHandler(op){\n        if(this.state.inputValue){\n            this.setState({\n                calciScreen:this.state.calciScreen + op,\n                inputValue:false,\n                operator: op\n            });\n        }\n    }\n\n    answer(){\n        try{\n            const value = this.state.calciScreen;\n            const ansValue = eval(value);\n            this.setState({calciScreen :ansValue,\n                        answerShown:true}) \n            }\n        catch(err){\n                console.log(err);\n                alert(\"Complete the query\")\n        }\n    }\n\n    clear(){\n        this.setState({calciScreen:'',\n                        ans:''});\n        \n\n    }\n\n    render(){\n        const buttonHandler = numArray.map((num) =>{\n            return(\n                <button className='btns' onClick={() => this.clickHandler(num.toString(),\"number\")}>{num}</button>\n                )\n            }\n        )\n        const operator = operatorArray.map((op) =>{\n            return(\n                <button className='opBtns' onClick={() => this.operatorHandler(op.op)}>{op.name}</button>\n            )\n        })\n        return(\n            <div className=\"container border\">\n                <div className='first-half'>\n                    <h1>Calculator</h1>\n                    <input readonly placeholder=\"0\" value = {this.state.calciScreen}/><br/>\n                </div> \n                <div className='second-half'>\n                    {buttonHandler}\n                    <button className='btns' onClick={() => this.answer()}>=</button>\n                    <button className='btns' onClick={() => this.clear()}>Clear</button>\n                </div>   \n                <div className='operator-style'>\n                    {operator}\n                </div>\n                <div style={{clear: 'both'}}></div>\n            </div>\n        );\n\n    }\n}\nexport default Calculator"],"sourceRoot":""}