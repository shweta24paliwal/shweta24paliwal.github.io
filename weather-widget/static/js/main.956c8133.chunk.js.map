{"version":3,"sources":["widget.js","serviceWorker.js","index.js"],"names":["Widget","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","city","weatherData","status","searchButtonText","getWeatherData","bind","assertThisInitialized","_this2","setState","axios","get","concat","then","response","console","log","data","catch","error","e","target","value","_this3","dataDetails","weatherReport","tempCel","Math","ceil","main","temp_min","temp_max","temp","flag","sys","country","toLowerCase","react_default","a","createElement","className","name","src","weather","description","icon","coord","lon","lat","class","humidity","pressure","placeholder","type","onChange","handleInput","onClick","style","height","window","innerHeight","Component","Boolean","location","hostname","match","ReactDOM","render","src_widget","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.956c8133.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport './widget.css';\r\n\r\nclass Widget extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            city:'',\r\n            weatherData:null,\r\n            status:null,\r\n            searchButtonText: 'Search'\r\n        }\r\n        this.getWeatherData = this.getWeatherData.bind(this);\r\n    }\r\n    getWeatherData(){\r\n        this.setState({\r\n            searchButtonText: 'Searching...'\r\n        });\r\n        axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&APPID=b709fcac1915307bf07ae95cad0b4368`)\r\n            .then((response)=> {\r\n                console.log(response);\r\n                this.setState({\r\n                    weatherData:response.data,\r\n                    status:response.status,\r\n                    city: '',\r\n                    searchButtonText: 'Search'\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                this.setState({\r\n                    status: 404,\r\n                    weatherData: null,\r\n                    city: '',\r\n                    searchButtonText: 'Search'\r\n                });\r\n            });\r\n    }\r\n    handleInput(e){\r\n        this.setState({\r\n            city:e.target.value\r\n        });\r\n    }\r\n    render(){\r\n        var data = null;\r\n        var dataDetails = null;\r\n        if(this.state.status === 200 && this.state.weatherData){\r\n            var weatherReport = this.state.weatherData;\r\n            var minTemp = Math.ceil(weatherReport.main.temp_min-273.15);\r\n            var maxTemp = Math.ceil(weatherReport.main.temp_max-273.15);\r\n            var tempCel = Math.ceil(weatherReport.main.temp-273.15);\r\n            \r\n            var flag = `http://openweathermap.org/images/flags/${weatherReport.sys.country}.png`;\r\n            flag = flag.toLowerCase();\r\n            data = (\r\n                <div className='data-section'>\r\n                    <h1 className='city-name'>{weatherReport.name},{weatherReport.sys.country}\r\n                        <img src={flag}/>\r\n                    </h1><br/>\r\n                    <span className='w-data'>{weatherReport.weather[0].description}</span>\r\n                    <img className='w-icon' src={`http://openweathermap.org/img/w/${weatherReport.weather[0].icon}.png`}/>\r\n                    <br/><br/>\r\n                    <span className='coords-lbl'>LON-[{weatherReport.coord.lon}]</span>\r\n                    <span className='coords-lbl'>LAT-[{weatherReport.coord.lat}]</span><br/><br/>\r\n                    <div class='temp-div'>\r\n                        <span className='temp'>{tempCel}</span>\r\n                        <span className='degree'>O</span> \r\n                        <span className='celsius'>C</span>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n            dataDetails = (\r\n                <div className='data-dtls-section'>\r\n                    <h4 className='dtls-head'>Details</h4>\r\n                    <img className='w-icon icon-img' src={`http://openweathermap.org/img/w/${weatherReport.weather[0].icon}.png`}/>\r\n                    <ul>\r\n                        <li>\r\n                            <span>Feels like</span>\r\n                            <span class='flt-right'>{weatherReport.weather[0].main}</span>\r\n                        </li>\r\n                        <li>\r\n                            <span>Humidity</span>\r\n                            <span class='flt-right'>{weatherReport.main.humidity}</span>\r\n                        </li>\r\n                        <li>\r\n                            <span>Pressure</span>\r\n                            <span class='flt-right'>{weatherReport.main.pressure}</span>\r\n                        </li>\r\n                     </ul>\r\n                     <span className=''>Today- {weatherReport.weather[0].description} with a temprature of {tempCel}&#8451;. Winds Variable\r\n                     </span>\r\n                </div>\r\n            )\r\n        } else if (this.state.status === 404) {\r\n               data = (\r\n                   <div className=\"error-ctn\">\r\n                       <h3>City not found. Please try another city.</h3>\r\n                   </div>\r\n               ); \r\n        }\r\n        \r\n        return(\r\n            <div>\r\n                <div className='header'>\r\n                    <h1>Weather Forecasting</h1>\r\n                    <input value={this.state.city} \r\n                            placeholder='Enter City Name'\r\n                            type='text' \r\n                            onChange={(e) => this.handleInput(e)\r\n                    }/>\r\n                    <button className='search-btn'\r\n                            onClick={this.getWeatherData}>{this.state.searchButtonText}\r\n                    </button>\r\n                </div>\r\n                <div className='container' style={{height: `${window.innerHeight - 77}px`}}>\r\n                    {data}  \r\n                    {dataDetails}\r\n                </div>\r\n\r\n                \r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\nexport default Widget","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Widget from './widget';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Widget />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}