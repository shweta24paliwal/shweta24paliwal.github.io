{"version":3,"sources":["ImageGallery.js","serviceWorker.js","index.js"],"names":["imageArray","Gallery","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","imageIndex","clickHandler","bind","assertThisInitialized","nextClickHandler","prevClickHandler","i","setState","nextIndex","length","prevIndex","_this2","imgSrc","buttonHandler","map","image","index","imageClass","push","react_default","a","createElement","className","join","width","height","onClick","src","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","ImageGallery","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAEMA,SAAa,CAAC,yMACpB,+KACA,iMACA,iKACA,iKACA,0KAoEeC,cAjEX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,WAAa,GAEjBR,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACpBA,EAAKY,iBAAmBZ,EAAKY,iBAAiBF,KAAtBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACxBA,EAAKa,iBAAmBb,EAAKa,iBAAiBH,KAAtBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAPVA,4EASLc,GACTX,KAAKY,SAAS,CAACP,WAAYM,+CAG3B,IACIE,EADeb,KAAKI,MAAMC,WACC,EAC5BQ,EAAYnB,EAAWoB,QACtBd,KAAKY,SAAS,CAACP,WAAYQ,+CAI/B,IACIE,EADef,KAAKI,MAAMC,WACC,EAC5BU,GAAa,GACZf,KAAKY,SAAS,CAACP,WAAYU,qCAI3B,IAAAC,EAAAhB,KACEiB,EAASvB,EAAWM,KAAKI,MAAMC,YAC/Ba,EAAgBxB,EAAWyB,IAAI,SAACC,EAAOC,GACzC,IAAIC,EAAa,CAAC,kBAIlB,OAHGD,IAAUL,EAAKZ,MAAMC,YACpBiB,EAAWC,KAAK,gBAGhBC,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,EAAWM,KAAK,MAC5BJ,EAAAC,EAAAC,cAAA,OACIG,MAAM,QAAQC,OAAO,QACrBC,QAAS,kBAAMf,EAAKV,aAAae,IACjCW,IAAKZ,OAMrB,OACII,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,4BAEJF,EAAAC,EAAAC,cAAA,WAASO,GAAG,SACRT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKG,MAAM,QAAQC,OAAO,QAAQE,IAAKf,IAASO,EAAAC,EAAAC,cAAA,YAGnDR,EAAcM,EAAAC,EAAAC,cAAA,WAEfF,EAAAC,EAAAC,cAAA,UAAQK,QAAS/B,KAAKS,iBAAkBkB,UAAU,oBAAlD,QACAH,EAAAC,EAAAC,cAAA,UAAQK,QAAS/B,KAAKU,iBAAkBiB,UAAU,mBAAlD,iBA3DEO,aCGFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAAaC,SAASC,eAAe,SD2H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.12a57ba5.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport \"./Gallery.css\";\nconst imageArray = [\"https://assets.myntassets.com/h_720,q_90,w_540/v1/assets/images/7428414/2018/10/5/c4bab57a-6bd0-4ac0-ab6c-cbc2bfbf0e6b1538735835101-FOREVER-21-Women-Red-Checked-Tailored-Jacket-708153873583366-1.jpg\",\n\"https://assets.myntassets.com/h_720,q_90,w_540/v1/assets/images/1469141/2016/9/1/11472708895984-Roadster-Women-Green-Regular-Fit-Checked-Casual-Shirt-9521472708895700-1.jpg\",\n\"https://assets.myntassets.com/h_720,q_90,w_540/v1/assets/images/6849789/2018/8/3/31a581e4-9eda-4540-87cb-9a358a5ba6cb1533297914690-Roadster-Women-Navy-Blue-Striped-Top-5671533297912420-1.jpg\",\n\"https://assets.myntassets.com/h_720,q_90,w_540/v1/assets/images/2025107/2017/9/2/11504331806749-Roadster-Women-Rust-Solid-Puffer-Jacket-8941504331806579-1.jpg\",\n\"https://assets.myntassets.com/h_720,q_90,w_540/v1/assets/images/1866509/2017/8/28/11503926753404-Roadster-Women-Maroon-Self--Design-Top-7301503926753088-1.jpg\",\n\"https://assets.myntassets.com/h_720,q_90,w_540/v1/assets/images/1857797/2017/5/9/11494309883256-FOREVER-21-Women-Grey-Melange-Solid-Sweatshirt-5951494309882860-1.jpg\"\n]\nclass Gallery extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            imageIndex : 0\n        }\n        this.clickHandler = this.clickHandler.bind(this);\n        this.nextClickHandler = this.nextClickHandler.bind(this);\n        this.prevClickHandler = this.prevClickHandler.bind(this);\n    }\n    clickHandler(i){\n        this.setState({imageIndex: i})\n    }\n    nextClickHandler(){\n        let currentIndex = this.state.imageIndex;\n        let nextIndex = currentIndex + 1;\n        if(nextIndex < imageArray.length){\n            this.setState({imageIndex: nextIndex});\n        }\n    }\n    prevClickHandler(){\n        let currentIndex = this.state.imageIndex;\n        let prevIndex = currentIndex - 1;\n        if(prevIndex >= 0){\n            this.setState({imageIndex: prevIndex});\n\n        }\n    }\n    render(){\n        const imgSrc = imageArray[this.state.imageIndex] \n        const buttonHandler = imageArray.map((image, index) =>{\n            let imageClass = [\"smallImagesDiv\"];\n            if(index === this.state.imageIndex){\n                imageClass.push(\"selected-img\") ;\n            }\n            return(\n                <div className={imageClass.join(\" \")}>\n                    <img  \n                        width=\"112px\" height=\"150px\" \n                        onClick={() => this.clickHandler(index)} \n                        src={image}\n                    />\n                </div>\n            \n            )\n        }  )\n        return(\n            <div>\n                <header>\n                    <h1>Image Gallery</h1>\n                </header>\n                <section id='women'>\n                    <div className='largeImageDiv'>\n                        <img width=\"314px\" height=\"419px\" src={imgSrc}/><br/>\n                    </div>\n                    \n                    {buttonHandler}<br/>\n                   \n                    <button onClick={this.nextClickHandler} className='absolute nextBtn'>NEXT</button>\n                    <button onClick={this.prevClickHandler} className='absolute prvBtn'>PREV</button>\n                </section>\n                \n            </div>\n        );\n    }\n} \nexport default Gallery\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Gallery from './ImageGallery';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Gallery />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}